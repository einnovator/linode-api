plugins {
	id 'java'
	id 'eclipse'
	id "maven"
	id "maven-publish"
	id 'net.saliman.cobertura' version '2.2.6'
	id "com.jfrog.bintray" version "1.4"
	id 'co.riiid.gradle' version '0.4.2'
}

group = 'synapticloop'
archivesBaseName = 'linode-api'
description = """An api for linode"""

version = 'v1.0.7'

description = """linode-api"""

sourceCompatibility = 1.7
targetCompatibility = 1.7



repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

configurations {
	generate
}

sourceSets {
	generate {
		java {
			srcDir 'src/generate/java'
		}
		resources {
			srcDir 'src/generate/resources'
		}
		output.resourcesDir = 'build/classes/generate'
		output.classesDir = 'build/classes/generate'

	}
}

eclipse {
	classpath {
		plusConfigurations += [ configurations.generateCompile ]
	}
}

task generateCompile(type: JavaCompile) {
	source = sourceSets.generate.java.srcDirs
	classpath = configurations.generateCompile
	destinationDir = file("build/classes/generate")
}

task generate(type: JavaExec) {
	dependsOn "generateCompile"
	main = "synapticloop.linode.Main"
	classpath += configurations.generateRuntime
	classpath += sourceSets.generate.output
}

tasks.compileJava.dependsOn("generate")

dependencies {
	runtime 'org.json:json:20160212'
	runtime 'org.apache.httpcomponents:httpclient:4.3.4'

	compile 'org.json:json:20160212'
	compile 'org.apache.httpcomponents:httpclient:4.3.4'

	generateCompile 'synapticloop:templar:v1.1.3'
	generateCompile 'org.jsoup:jsoup:1.8.3'

	generateRuntime 'synapticloop:templar:v1.1.3'
	generateRuntime 'org.jsoup:jsoup:1.8.3'

	testCompile group: 'junit', name: 'junit', version:'4.7'
}

/*
 * COBERTURA
 */

cobertura {
	coverageFormats = [ 'html', 'xml']
}

test {
	include '**/*Test.class' 
	maxParallelForks = 1
	forkEvery = 50 
}


/*
 *
 * Publish to bintray
 *
 */


def javaApiUrl = 'http://docs.oracle.com/javase/1.7.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
	options.links(javaApiUrl, groovyApiUrl)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

publishing {
	publications {
		Synapticloop(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			groupId 'synapticloop'
			artifactId 'linode-api'

			pom.withXml {
				configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
					asNode().dependencies[0].dependency.find {
						it.artifactId[0].text() == dep.moduleName &&
								it.groupId[0].text() == dep.moduleGroup
					}.scope[0].value = 'compile'
				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_PASSWORD')

	publications = [ 'Synapticloop' ]

	publish = true

	pkg {
		repo = 'maven'
		name = 'linode-api'
	}
}

github {
	owner = group
	repo = archivesBaseName
	if(System.getenv('GITHUB_TOKEN')) {
		token = System.getenv('GITHUB_TOKEN')
	}
	tagName = version
	name = version
	assets = [
		'build/libs/' + archivesBaseName + '-' + version + '.jar'
	]
}
