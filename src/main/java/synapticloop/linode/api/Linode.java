package synapticloop.linode.api;

// - - - - thoughtfully generated by synapticloop linode-api - - - - 
//     with the use of synapticloop templar templating language
//               (java-create-api.templar)

import java.util.HashMap;
import java.util.Map;

import synapticloop.linode.LinodeRequest;
import synapticloop.linode.exception.ApiException;

public class Linode {
	private static final String PARAM_CONSTANT_LINODEID = "LinodeID";
	private static final String PARAM_CONSTANT_CONFIGID = "ConfigID";
	private static final String PARAM_CONSTANT_DATACENTERID = "DatacenterID";
	private static final String PARAM_CONSTANT_PLANID = "PlanID";
	private static final String PARAM_CONSTANT_PAYMENTTERM = "PaymentTerm";
	private static final String PARAM_CONSTANT_KERNELID = "KernelID";
	private static final String PARAM_CONSTANT_LABEL = "Label";
	private static final String PARAM_CONSTANT_COMMENTS = "Comments";
	private static final String PARAM_CONSTANT_RAMLIMIT = "RAMLimit";
	private static final String PARAM_CONSTANT_DISKLIST = "DiskList";
	private static final String PARAM_CONSTANT_VIRT_MODE = "virt_mode";
	private static final String PARAM_CONSTANT_RUNLEVEL = "RunLevel";
	private static final String PARAM_CONSTANT_ROOTDEVICENUM = "RootDeviceNum";
	private static final String PARAM_CONSTANT_ROOTDEVICECUSTOM = "RootDeviceCustom";
	private static final String PARAM_CONSTANT_ROOTDEVICERO = "RootDeviceRO";
	private static final String PARAM_CONSTANT_HELPER_DISABLEUPDATEDB = "helper_disableUpdateDB";
	private static final String PARAM_CONSTANT_HELPER_DISTRO = "helper_distro";
	private static final String PARAM_CONSTANT_HELPER_XEN = "helper_xen";
	private static final String PARAM_CONSTANT_HELPER_DEPMOD = "helper_depmod";
	private static final String PARAM_CONSTANT_HELPER_NETWORK = "helper_network";
	private static final String PARAM_CONSTANT_DEVTMPFS_AUTOMOUNT = "devtmpfs_automount";
	private static final String PARAM_CONSTANT_SKIPCHECKS = "skipChecks";
	private static final String PARAM_CONSTANT_FROMDISTRIBUTIONID = "FromDistributionID";
	private static final String PARAM_CONSTANT_ROOTPASS = "rootPass";
	private static final String PARAM_CONSTANT_ROOTSSHKEY = "rootSSHKey";
	private static final String PARAM_CONSTANT_TYPE = "Type";
	private static final String PARAM_CONSTANT_ISREADONLY = "isReadOnly";
	private static final String PARAM_CONSTANT_SIZE = "size";
	private static final String PARAM_CONSTANT_DISTRIBUTIONID = "DistributionID";
	private static final String PARAM_CONSTANT_IMAGEID = "ImageID";
	private static final String PARAM_CONSTANT_STACKSCRIPTID = "StackScriptID";
	private static final String PARAM_CONSTANT_STACKSCRIPTUDFRESPONSES = "StackScriptUDFResponses";
	private static final String PARAM_CONSTANT_DISKID = "DiskID";
	private static final String PARAM_CONSTANT_DESCRIPTION = "Description";
	private static final String PARAM_CONSTANT_IPADDRESSID = "IPAddressID";
	private static final String PARAM_CONSTANT_HOSTNAME = "Hostname";
	private static final String PARAM_CONSTANT_WITHIPADDRESSID = "withIPAddressID";
	private static final String PARAM_CONSTANT_TOLINODEID = "toLinodeID";
	private static final String PARAM_CONSTANT_JOBID = "JobID";
	private static final String PARAM_CONSTANT_PENDINGONLY = "pendingOnly";
	private static final String PARAM_CONSTANT_LPM_DISPLAYGROUP = "lpm_displayGroup";
	private static final String PARAM_CONSTANT_ALERT_CPU_ENABLED = "Alert_cpu_enabled";
	private static final String PARAM_CONSTANT_ALERT_CPU_THRESHOLD = "Alert_cpu_threshold";
	private static final String PARAM_CONSTANT_ALERT_DISKIO_ENABLED = "Alert_diskio_enabled";
	private static final String PARAM_CONSTANT_ALERT_DISKIO_THRESHOLD = "Alert_diskio_threshold";
	private static final String PARAM_CONSTANT_ALERT_BWIN_ENABLED = "Alert_bwin_enabled";
	private static final String PARAM_CONSTANT_ALERT_BWIN_THRESHOLD = "Alert_bwin_threshold";
	private static final String PARAM_CONSTANT_ALERT_BWOUT_ENABLED = "Alert_bwout_enabled";
	private static final String PARAM_CONSTANT_ALERT_BWOUT_THRESHOLD = "Alert_bwout_threshold";
	private static final String PARAM_CONSTANT_ALERT_BWQUOTA_ENABLED = "Alert_bwquota_enabled";
	private static final String PARAM_CONSTANT_ALERT_BWQUOTA_THRESHOLD = "Alert_bwquota_threshold";
	private static final String PARAM_CONSTANT_BACKUPWINDOW = "backupWindow";
	private static final String PARAM_CONSTANT_BACKUPWEEKLYDAY = "backupWeeklyDay";
	private static final String PARAM_CONSTANT_WATCHDOG = "watchdog";
	private static final String PARAM_CONSTANT_MS_SSH_DISABLED = "ms_ssh_disabled";
	private static final String PARAM_CONSTANT_MS_SSH_USER = "ms_ssh_user";
	private static final String PARAM_CONSTANT_MS_SSH_IP = "ms_ssh_ip";
	private static final String PARAM_CONSTANT_MS_SSH_PORT = "ms_ssh_port";

	/**
	 * <p>Issues a boot job for the provided ConfigID. If no ConfigID is provided boots the last used 
	 * configuration profile, or the first configuration profile if this Linode has never been booted.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.boot",
	 *    "DATA":{
	 *       "JobID":1293
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest boot(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.boot", parameters));
	}

	/**
	 * <p>Issues a boot job for the provided ConfigID. If no ConfigID is provided boots the last used 
	 * configuration profile, or the first configuration profile if this Linode has never been booted.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.boot",
	 *    "DATA":{
	 *       "JobID":1293
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 * @param configID The ConfigID to boot, available from linode.config.list().
	 *
	 */

	public static LinodeRequest boot(Long linodeID, Long configID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != configID) {
			parameters.put(PARAM_CONSTANT_CONFIGID, configID.toString());
		}
		return(new LinodeRequest("linode.boot", parameters));
	}

	/**
	 * <p>Creates a new Linode, assigns you full privileges, and then clones the specified LinodeID 
	 * to the new Linode. There is a limit of 5 active clone operations per source Linode. It is 
	 * recommended that the source Linode be powered down during the clone.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.clone",
	 *    "DATA":{
	 *       "LinodeID":8098
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOACCESS
	 *   - NOTFOUND
	 *   - CCFAILED
	 *   - VALIDATION
	 *   - LINODELIMITER
	 *   - ACCOUNTLIMIT
	 *
	 * @param linodeID The LinodeID that you want cloned
	 * @param datacenterID The DatacenterID from avail.datacenters() where you wish to place this new Linode
	 * @param planID The desired PlanID available from avail.LinodePlans()
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest clone(Long linodeID, Long datacenterID, Long planID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != datacenterID) {
			parameters.put(PARAM_CONSTANT_DATACENTERID, datacenterID.toString());
		} else {
			throw new ApiException("Parameter 'datacenterID' is required and cannot be null.");
		}
		if(null != planID) {
			parameters.put(PARAM_CONSTANT_PLANID, planID.toString());
		} else {
			throw new ApiException("Parameter 'planID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.clone", parameters));
	}

	/**
	 * <p>Creates a new Linode, assigns you full privileges, and then clones the specified LinodeID 
	 * to the new Linode. There is a limit of 5 active clone operations per source Linode. It is 
	 * recommended that the source Linode be powered down during the clone.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.clone",
	 *    "DATA":{
	 *       "LinodeID":8098
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOACCESS
	 *   - NOTFOUND
	 *   - CCFAILED
	 *   - VALIDATION
	 *   - LINODELIMITER
	 *   - ACCOUNTLIMIT
	 *
	 * @param linodeID The LinodeID that you want cloned
	 * @param datacenterID The DatacenterID from avail.datacenters() where you wish to place this new Linode
	 * @param planID The desired PlanID available from avail.LinodePlans()
	 * @param paymentTerm Subscription term in months for prepaid customers. One of: 1, 12, or 24
	 *
	 */

	public static LinodeRequest clone(Long linodeID, Long datacenterID, Long planID, Long paymentTerm) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != datacenterID) {
			parameters.put(PARAM_CONSTANT_DATACENTERID, datacenterID.toString());
		} else {
			throw new ApiException("Parameter 'datacenterID' is required and cannot be null.");
		}
		if(null != planID) {
			parameters.put(PARAM_CONSTANT_PLANID, planID.toString());
		} else {
			throw new ApiException("Parameter 'planID' is required and cannot be null.");
		}
		if(null != paymentTerm) {
			parameters.put(PARAM_CONSTANT_PAYMENTTERM, paymentTerm.toString());
		}
		return(new LinodeRequest("linode.clone", parameters));
	}

	/**
	 * <p>Creates a Linode Configuration Profile.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.config.create",
	 *    "DATA":{
	 *       "ConfigID":31239
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param kernelID The KernelID for this profile. Found in avail.kernels()
	 * @param label The Label for this profile
	 * @param diskList A comma delimited list of DiskIDs; position reflects device node. The 9th element for specifying the initrd.
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest configcreate(Long linodeID, Long kernelID, String label, String diskList) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != kernelID) {
			parameters.put(PARAM_CONSTANT_KERNELID, kernelID.toString());
		} else {
			throw new ApiException("Parameter 'kernelID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != diskList) {
			parameters.put(PARAM_CONSTANT_DISKLIST, diskList.toString());
		} else {
			throw new ApiException("Parameter 'diskList' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.config.create", parameters));
	}

	/**
	 * <p>Creates a Linode Configuration Profile.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.config.create",
	 *    "DATA":{
	 *       "ConfigID":31239
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param kernelID The KernelID for this profile. Found in avail.kernels()
	 * @param label The Label for this profile
	 * @param comments Comments you wish to save along with this profile
	 * @param rAMLimit RAMLimit in MB. 0 for max.
	 * @param diskList A comma delimited list of DiskIDs; position reflects device node. The 9th element for specifying the initrd.
	 * @param virt_mode Controls the virtualization mode. One of 'paravirt', 'fullvirt' 
	 * @param runLevel One of 'default', 'single', 'binbash' 
	 * @param rootDeviceNum Which device number (1-8) that contains the root partition. 0 to utilize RootDeviceCustom.
	 * @param rootDeviceCustom A custom root device setting.
	 * @param rootDeviceRO Enables the 'ro' kernel flag. Modern distros want this. 
	 * @param helper_disableUpdateDB Enable the disableUpdateDB filesystem helper
	 * @param helper_distro Enable the Distro filesystem helper. Corrects fstab and inittab/upstart entries depending on the kernel you're booting. You want this.
	 * @param helper_xen Deprecated - use helper_distro.
	 * @param helper_depmod Creates an empty modprobe file for the kernel you're booting. 
	 * @param helper_network Automatically creates network configuration files for your distro and places them into your filesystem.
	 * @param devtmpfs_automount Controls if pv_ops kernels should automount devtmpfs at boot. 
	 *
	 */

	public static LinodeRequest configcreate(Long linodeID, Long kernelID, String label, String comments, Long rAMLimit, String diskList, String virt_mode, String runLevel, Long rootDeviceNum, String rootDeviceCustom, Boolean rootDeviceRO, Boolean helper_disableUpdateDB, Boolean helper_distro, Boolean helper_xen, Boolean helper_depmod, Boolean helper_network, Boolean devtmpfs_automount) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != kernelID) {
			parameters.put(PARAM_CONSTANT_KERNELID, kernelID.toString());
		} else {
			throw new ApiException("Parameter 'kernelID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != comments) {
			parameters.put(PARAM_CONSTANT_COMMENTS, comments.toString());
		}
		if(null != rAMLimit) {
			parameters.put(PARAM_CONSTANT_RAMLIMIT, rAMLimit.toString());
		}
		if(null != diskList) {
			parameters.put(PARAM_CONSTANT_DISKLIST, diskList.toString());
		} else {
			throw new ApiException("Parameter 'diskList' is required and cannot be null.");
		}
		if(null != virt_mode) {
			parameters.put(PARAM_CONSTANT_VIRT_MODE, virt_mode.toString());
		}
		if(null != runLevel) {
			parameters.put(PARAM_CONSTANT_RUNLEVEL, runLevel.toString());
		}
		if(null != rootDeviceNum) {
			parameters.put(PARAM_CONSTANT_ROOTDEVICENUM, rootDeviceNum.toString());
		}
		if(null != rootDeviceCustom) {
			parameters.put(PARAM_CONSTANT_ROOTDEVICECUSTOM, rootDeviceCustom.toString());
		}
		if(null != rootDeviceRO) {
			parameters.put(PARAM_CONSTANT_ROOTDEVICERO, rootDeviceRO.toString());
		}
		if(null != helper_disableUpdateDB) {
			parameters.put(PARAM_CONSTANT_HELPER_DISABLEUPDATEDB, helper_disableUpdateDB.toString());
		}
		if(null != helper_distro) {
			parameters.put(PARAM_CONSTANT_HELPER_DISTRO, helper_distro.toString());
		}
		if(null != helper_xen) {
			parameters.put(PARAM_CONSTANT_HELPER_XEN, helper_xen.toString());
		}
		if(null != helper_depmod) {
			parameters.put(PARAM_CONSTANT_HELPER_DEPMOD, helper_depmod.toString());
		}
		if(null != helper_network) {
			parameters.put(PARAM_CONSTANT_HELPER_NETWORK, helper_network.toString());
		}
		if(null != devtmpfs_automount) {
			parameters.put(PARAM_CONSTANT_DEVTMPFS_AUTOMOUNT, devtmpfs_automount.toString());
		}
		return(new LinodeRequest("linode.config.create", parameters));
	}

	/**
	 * <p>Deletes a Linode Configuration Profile.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.config.delete",
	 *    "DATA":{
	 *       "ConfigID":31239
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param configID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest configdelete(Long linodeID, Long configID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != configID) {
			parameters.put(PARAM_CONSTANT_CONFIGID, configID.toString());
		} else {
			throw new ApiException("Parameter 'configID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.config.delete", parameters));
	}

	/**
	 * <p>Lists a Linode's Configuration Profiles.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.config.list",
	 *    "DATA":[
	 *       {
	 *          "helper_disableUpdateDB":1,
	 *          "RootDeviceRO":true,
	 *          "RootDeviceCustom":"",
	 *          "Label":"My configuration profile",
	 *          "DiskList":"55319,55590,,55591,55592,,,,",
	 *          "LinodeID":8098,
	 *          "Comments":"",
	 *          "ConfigID":31058,
	 *          "helper_xen":1,
	 *          "RunLevel":"default",
	 *          "helper_depmod":1,
	 *          "KernelID":85,
	 *          "RootDeviceNum":1,
	 *          "helper_libtls":false,
	 *          "RAMLimit":0
	 *       },
	 *       {
	 *          "helper_disableUpdateDB":1,
	 *          "RootDeviceRO":true,
	 *          "RootDeviceCustom":"",
	 *          "Label":"test profile",
	 *          "DiskList":",,,,,,,,",
	 *          "LinodeID":8098,
	 *          "Comments":"",
	 *          "ConfigID":31231,
	 *          "helper_xen":1,
	 *          "RunLevel":"default",
	 *          "helper_depmod":1,
	 *          "KernelID":85,
	 *          "RootDeviceNum":1,
	 *          "helper_libtls":false,
	 *          "RAMLimit":0
	 *       }
	 *    ]
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest configlist(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.config.list", parameters));
	}

	/**
	 * <p>Lists a Linode's Configuration Profiles.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.config.list",
	 *    "DATA":[
	 *       {
	 *          "helper_disableUpdateDB":1,
	 *          "RootDeviceRO":true,
	 *          "RootDeviceCustom":"",
	 *          "Label":"My configuration profile",
	 *          "DiskList":"55319,55590,,55591,55592,,,,",
	 *          "LinodeID":8098,
	 *          "Comments":"",
	 *          "ConfigID":31058,
	 *          "helper_xen":1,
	 *          "RunLevel":"default",
	 *          "helper_depmod":1,
	 *          "KernelID":85,
	 *          "RootDeviceNum":1,
	 *          "helper_libtls":false,
	 *          "RAMLimit":0
	 *       },
	 *       {
	 *          "helper_disableUpdateDB":1,
	 *          "RootDeviceRO":true,
	 *          "RootDeviceCustom":"",
	 *          "Label":"test profile",
	 *          "DiskList":",,,,,,,,",
	 *          "LinodeID":8098,
	 *          "Comments":"",
	 *          "ConfigID":31231,
	 *          "helper_xen":1,
	 *          "RunLevel":"default",
	 *          "helper_depmod":1,
	 *          "KernelID":85,
	 *          "RootDeviceNum":1,
	 *          "helper_libtls":false,
	 *          "RAMLimit":0
	 *       }
	 *    ]
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 * @param configID 
	 *
	 */

	public static LinodeRequest configlist(Long linodeID, Long configID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != configID) {
			parameters.put(PARAM_CONSTANT_CONFIGID, configID.toString());
		}
		return(new LinodeRequest("linode.config.list", parameters));
	}

	/**
	 * <p>Updates a Linode Configuration Profile.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.config.update",
	 *    "DATA":{
	 *       "ConfigID":31239
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param configID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest configupdate(Long configID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != configID) {
			parameters.put(PARAM_CONSTANT_CONFIGID, configID.toString());
		} else {
			throw new ApiException("Parameter 'configID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.config.update", parameters));
	}

	/**
	 * <p>Updates a Linode Configuration Profile.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.config.update",
	 *    "DATA":{
	 *       "ConfigID":31239
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param configID 
	 * @param kernelID The KernelID for this profile. Found in avail.kernels()
	 * @param label The Label for this profile
	 * @param comments Comments you wish to save along with this profile
	 * @param rAMLimit RAMLimit in MB. 0 for max.
	 * @param diskList A comma delimited list of DiskIDs; position reflects device node. The 9th element for specifying the initrd.
	 * @param virt_mode Controls the virtualization mode. One of 'paravirt', 'fullvirt' 
	 * @param runLevel One of 'default', 'single', 'binbash' 
	 * @param rootDeviceNum Which device number (1-8) that contains the root partition. 0 to utilize RootDeviceCustom.
	 * @param rootDeviceCustom A custom root device setting.
	 * @param rootDeviceRO Enables the 'ro' kernel flag. Modern distros want this. 
	 * @param helper_disableUpdateDB Enable the disableUpdateDB filesystem helper
	 * @param helper_distro Enable the Distro filesystem helper. Corrects fstab and inittab/upstart entries depending on the kernel you're booting. You want this.
	 * @param helper_xen Deprecated - use helper_distro.
	 * @param helper_depmod Creates an empty modprobe file for the kernel you're booting. 
	 * @param helper_network Automatically creates network configuration files for your distro and places them into your filesystem.
	 * @param devtmpfs_automount Controls if pv_ops kernels should automount devtmpfs at boot. 
	 *
	 */

	public static LinodeRequest configupdate(Long linodeID, Long configID, Long kernelID, String label, String comments, Long rAMLimit, String diskList, String virt_mode, String runLevel, Long rootDeviceNum, String rootDeviceCustom, Boolean rootDeviceRO, Boolean helper_disableUpdateDB, Boolean helper_distro, Boolean helper_xen, Boolean helper_depmod, Boolean helper_network, Boolean devtmpfs_automount) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		}
		if(null != configID) {
			parameters.put(PARAM_CONSTANT_CONFIGID, configID.toString());
		} else {
			throw new ApiException("Parameter 'configID' is required and cannot be null.");
		}
		if(null != kernelID) {
			parameters.put(PARAM_CONSTANT_KERNELID, kernelID.toString());
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		}
		if(null != comments) {
			parameters.put(PARAM_CONSTANT_COMMENTS, comments.toString());
		}
		if(null != rAMLimit) {
			parameters.put(PARAM_CONSTANT_RAMLIMIT, rAMLimit.toString());
		}
		if(null != diskList) {
			parameters.put(PARAM_CONSTANT_DISKLIST, diskList.toString());
		}
		if(null != virt_mode) {
			parameters.put(PARAM_CONSTANT_VIRT_MODE, virt_mode.toString());
		}
		if(null != runLevel) {
			parameters.put(PARAM_CONSTANT_RUNLEVEL, runLevel.toString());
		}
		if(null != rootDeviceNum) {
			parameters.put(PARAM_CONSTANT_ROOTDEVICENUM, rootDeviceNum.toString());
		}
		if(null != rootDeviceCustom) {
			parameters.put(PARAM_CONSTANT_ROOTDEVICECUSTOM, rootDeviceCustom.toString());
		}
		if(null != rootDeviceRO) {
			parameters.put(PARAM_CONSTANT_ROOTDEVICERO, rootDeviceRO.toString());
		}
		if(null != helper_disableUpdateDB) {
			parameters.put(PARAM_CONSTANT_HELPER_DISABLEUPDATEDB, helper_disableUpdateDB.toString());
		}
		if(null != helper_distro) {
			parameters.put(PARAM_CONSTANT_HELPER_DISTRO, helper_distro.toString());
		}
		if(null != helper_xen) {
			parameters.put(PARAM_CONSTANT_HELPER_XEN, helper_xen.toString());
		}
		if(null != helper_depmod) {
			parameters.put(PARAM_CONSTANT_HELPER_DEPMOD, helper_depmod.toString());
		}
		if(null != helper_network) {
			parameters.put(PARAM_CONSTANT_HELPER_NETWORK, helper_network.toString());
		}
		if(null != devtmpfs_automount) {
			parameters.put(PARAM_CONSTANT_DEVTMPFS_AUTOMOUNT, devtmpfs_automount.toString());
		}
		return(new LinodeRequest("linode.config.update", parameters));
	}

	/**
	 * <p>Creates a Linode and assigns you full privileges. There is a 75-linodes-per-hour 
	 * limiter.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.create",
	 *    "DATA":{
	 *       "LinodeID":8098
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOACCESS
	 *   - CCFAILED
	 *   - VALIDATION
	 *   - LINODELIMITER
	 *   - ACCOUNTLIMIT
	 *
	 * @param datacenterID The DatacenterID from avail.datacenters() where you wish to place this new Linode
	 * @param planID The desired PlanID available from avail.LinodePlans()
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest create(Long datacenterID, Long planID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != datacenterID) {
			parameters.put(PARAM_CONSTANT_DATACENTERID, datacenterID.toString());
		} else {
			throw new ApiException("Parameter 'datacenterID' is required and cannot be null.");
		}
		if(null != planID) {
			parameters.put(PARAM_CONSTANT_PLANID, planID.toString());
		} else {
			throw new ApiException("Parameter 'planID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.create", parameters));
	}

	/**
	 * <p>Creates a Linode and assigns you full privileges. There is a 75-linodes-per-hour 
	 * limiter.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.create",
	 *    "DATA":{
	 *       "LinodeID":8098
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOACCESS
	 *   - CCFAILED
	 *   - VALIDATION
	 *   - LINODELIMITER
	 *   - ACCOUNTLIMIT
	 *
	 * @param datacenterID The DatacenterID from avail.datacenters() where you wish to place this new Linode
	 * @param planID The desired PlanID available from avail.LinodePlans()
	 * @param paymentTerm Subscription term in months for prepaid customers. One of: 1, 12, or 24
	 *
	 */

	public static LinodeRequest create(Long datacenterID, Long planID, Long paymentTerm) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != datacenterID) {
			parameters.put(PARAM_CONSTANT_DATACENTERID, datacenterID.toString());
		} else {
			throw new ApiException("Parameter 'datacenterID' is required and cannot be null.");
		}
		if(null != planID) {
			parameters.put(PARAM_CONSTANT_PLANID, planID.toString());
		} else {
			throw new ApiException("Parameter 'planID' is required and cannot be null.");
		}
		if(null != paymentTerm) {
			parameters.put(PARAM_CONSTANT_PAYMENTTERM, paymentTerm.toString());
		}
		return(new LinodeRequest("linode.create", parameters));
	}

	/**
	 * <p>Immediately removes a Linode from your account and issues a pro-rated credit back to your 
	 * account, if applicable. To prevent accidental deletes, this requires the Linode has no Disk images. You 
	 * must first delete its disk images."</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.delete",
	 *    "DATA":{
	 *       "LinodeID":8204
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - LINODENOTEMPTY
	 *
	 * @param linodeID The LinodeID to delete
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest delete(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.delete", parameters));
	}

	/**
	 * <p>Immediately removes a Linode from your account and issues a pro-rated credit back to your 
	 * account, if applicable. To prevent accidental deletes, this requires the Linode has no Disk images. You 
	 * must first delete its disk images."</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.delete",
	 *    "DATA":{
	 *       "LinodeID":8204
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - LINODENOTEMPTY
	 *
	 * @param linodeID The LinodeID to delete
	 * @param skipChecks Skips the safety checks and will always delete the Linode
	 *
	 */

	public static LinodeRequest delete(Long linodeID, Boolean skipChecks) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != skipChecks) {
			parameters.put(PARAM_CONSTANT_SKIPCHECKS, skipChecks.toString());
		}
		return(new LinodeRequest("linode.delete", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.create",
	 *    "DATA":{
	 *       "JobID":1298,
	 *       "DiskID":55647
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param label The display label for this Disk
	 * @param type The formatted type of this disk. Valid types are: ext3, ext4, swap, raw
	 * @param size The size in MB of this Disk.
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskcreate(Long linodeID, String label, String type, Long size) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != type) {
			parameters.put(PARAM_CONSTANT_TYPE, type.toString());
		} else {
			throw new ApiException("Parameter 'type' is required and cannot be null.");
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		} else {
			throw new ApiException("Parameter 'size' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.create", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.create",
	 *    "DATA":{
	 *       "JobID":1298,
	 *       "DiskID":55647
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param fromDistributionID 
	 * @param rootPass 
	 * @param rootSSHKey 
	 * @param label The display label for this Disk
	 * @param type The formatted type of this disk. Valid types are: ext3, ext4, swap, raw
	 * @param isReadOnly Enable forced read-only for this Disk
	 * @param size The size in MB of this Disk.
	 *
	 */

	public static LinodeRequest diskcreate(Long linodeID, Long fromDistributionID, String rootPass, String rootSSHKey, String label, String type, Boolean isReadOnly, Long size) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != fromDistributionID) {
			parameters.put(PARAM_CONSTANT_FROMDISTRIBUTIONID, fromDistributionID.toString());
		}
		if(null != rootPass) {
			parameters.put(PARAM_CONSTANT_ROOTPASS, rootPass.toString());
		}
		if(null != rootSSHKey) {
			parameters.put(PARAM_CONSTANT_ROOTSSHKEY, rootSSHKey.toString());
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != type) {
			parameters.put(PARAM_CONSTANT_TYPE, type.toString());
		} else {
			throw new ApiException("Parameter 'type' is required and cannot be null.");
		}
		if(null != isReadOnly) {
			parameters.put(PARAM_CONSTANT_ISREADONLY, isReadOnly.toString());
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		} else {
			throw new ApiException("Parameter 'size' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.create", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.createFromDistribution",
	 *    "DATA":{
	 *       "JobID":1298,
	 *       "DiskID":55647
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param distributionID The DistributionID to create this disk from. Found in avail.distributions()
	 * @param label The label of this new disk image
	 * @param size Size of this disk image in MB
	 * @param rootPass The root user's password
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskcreatefromdistribution(Long linodeID, Long distributionID, String label, Long size, String rootPass) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != distributionID) {
			parameters.put(PARAM_CONSTANT_DISTRIBUTIONID, distributionID.toString());
		} else {
			throw new ApiException("Parameter 'distributionID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		} else {
			throw new ApiException("Parameter 'size' is required and cannot be null.");
		}
		if(null != rootPass) {
			parameters.put(PARAM_CONSTANT_ROOTPASS, rootPass.toString());
		} else {
			throw new ApiException("Parameter 'rootPass' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.createfromdistribution", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.createFromDistribution",
	 *    "DATA":{
	 *       "JobID":1298,
	 *       "DiskID":55647
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param distributionID The DistributionID to create this disk from. Found in avail.distributions()
	 * @param label The label of this new disk image
	 * @param size Size of this disk image in MB
	 * @param rootPass The root user's password
	 * @param rootSSHKey Optionally sets this string into /root/.ssh/authorized_keys upon distribution configuration.
	 *
	 */

	public static LinodeRequest diskcreatefromdistribution(Long linodeID, Long distributionID, String label, Long size, String rootPass, String rootSSHKey) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != distributionID) {
			parameters.put(PARAM_CONSTANT_DISTRIBUTIONID, distributionID.toString());
		} else {
			throw new ApiException("Parameter 'distributionID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		} else {
			throw new ApiException("Parameter 'size' is required and cannot be null.");
		}
		if(null != rootPass) {
			parameters.put(PARAM_CONSTANT_ROOTPASS, rootPass.toString());
		} else {
			throw new ApiException("Parameter 'rootPass' is required and cannot be null.");
		}
		if(null != rootSSHKey) {
			parameters.put(PARAM_CONSTANT_ROOTSSHKEY, rootSSHKey.toString());
		}
		return(new LinodeRequest("linode.disk.createfromdistribution", parameters));
	}

	/**
	 * <p>Creates a new disk from a previously imagized disk.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    ERRORARRAY: [],
	 *    ACTION: "linode.disk.createfromimage",
	 *    DATA: {
	 *       JOBID: 999,
	 *       DISKID: 4567
	 *    }
	 * }
	 * </pre>
	 *
	 * @param imageID The ID of the frozen image to deploy from
	 * @param linodeID Specifies the Linode to deploy on to
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskcreatefromimage(Long imageID, Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != imageID) {
			parameters.put(PARAM_CONSTANT_IMAGEID, imageID.toString());
		} else {
			throw new ApiException("Parameter 'imageID' is required and cannot be null.");
		}
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.createfromimage", parameters));
	}

	/**
	 * <p>Creates a new disk from a previously imagized disk.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    ERRORARRAY: [],
	 *    ACTION: "linode.disk.createfromimage",
	 *    DATA: {
	 *       JOBID: 999,
	 *       DISKID: 4567
	 *    }
	 * }
	 * </pre>
	 *
	 * @param imageID The ID of the frozen image to deploy from
	 * @param linodeID Specifies the Linode to deploy on to
	 * @param label The label of this new disk image
	 * @param size The size of the disk image to creates. Defaults to the minimum size required for the requested image
	 * @param rootPass Optionally sets the root password at deployment time. If a password is not provided the existing root password of the frozen image will not be modified
	 * @param rootSSHKey Optionally sets this string into /root/.ssh/authorized_keys upon image deployment
	 *
	 */

	public static LinodeRequest diskcreatefromimage(Long imageID, Long linodeID, String label, Long size, String rootPass, String rootSSHKey) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != imageID) {
			parameters.put(PARAM_CONSTANT_IMAGEID, imageID.toString());
		} else {
			throw new ApiException("Parameter 'imageID' is required and cannot be null.");
		}
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		}
		if(null != rootPass) {
			parameters.put(PARAM_CONSTANT_ROOTPASS, rootPass.toString());
		}
		if(null != rootSSHKey) {
			parameters.put(PARAM_CONSTANT_ROOTSSHKEY, rootSSHKey.toString());
		}
		return(new LinodeRequest("linode.disk.createfromimage", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    ERRORARRAY: [ ],
	 *    DATA: {
	 *       JobID: 445,
	 *       DiskID: 770050
	 *    },
	 *    ACTION: "linode.disk.createfromstackscript"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param stackScriptID The StackScript to create this image from
	 * @param stackScriptUDFResponses JSON encoded name/value pairs, answering this StackScript's User Defined Fields
	 * @param distributionID Which Distribution to apply this StackScript to. Must be one from the script's DistributionIDList
	 * @param label The label of this new disk image
	 * @param size Size of this disk image in MB
	 * @param rootPass The root user's password
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskcreatefromstackscript(Long linodeID, Long stackScriptID, String stackScriptUDFResponses, Long distributionID, String label, Long size, String rootPass) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != stackScriptID) {
			parameters.put(PARAM_CONSTANT_STACKSCRIPTID, stackScriptID.toString());
		} else {
			throw new ApiException("Parameter 'stackScriptID' is required and cannot be null.");
		}
		if(null != stackScriptUDFResponses) {
			parameters.put(PARAM_CONSTANT_STACKSCRIPTUDFRESPONSES, stackScriptUDFResponses.toString());
		} else {
			throw new ApiException("Parameter 'stackScriptUDFResponses' is required and cannot be null.");
		}
		if(null != distributionID) {
			parameters.put(PARAM_CONSTANT_DISTRIBUTIONID, distributionID.toString());
		} else {
			throw new ApiException("Parameter 'distributionID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		} else {
			throw new ApiException("Parameter 'size' is required and cannot be null.");
		}
		if(null != rootPass) {
			parameters.put(PARAM_CONSTANT_ROOTPASS, rootPass.toString());
		} else {
			throw new ApiException("Parameter 'rootPass' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.createfromstackscript", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    ERRORARRAY: [ ],
	 *    DATA: {
	 *       JobID: 445,
	 *       DiskID: 770050
	 *    },
	 *    ACTION: "linode.disk.createfromstackscript"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param stackScriptID The StackScript to create this image from
	 * @param stackScriptUDFResponses JSON encoded name/value pairs, answering this StackScript's User Defined Fields
	 * @param distributionID Which Distribution to apply this StackScript to. Must be one from the script's DistributionIDList
	 * @param label The label of this new disk image
	 * @param size Size of this disk image in MB
	 * @param rootPass The root user's password
	 * @param rootSSHKey Optionally sets this string into /root/.ssh/authorized_keys upon distribution configuration.
	 *
	 */

	public static LinodeRequest diskcreatefromstackscript(Long linodeID, Long stackScriptID, String stackScriptUDFResponses, Long distributionID, String label, Long size, String rootPass, String rootSSHKey) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != stackScriptID) {
			parameters.put(PARAM_CONSTANT_STACKSCRIPTID, stackScriptID.toString());
		} else {
			throw new ApiException("Parameter 'stackScriptID' is required and cannot be null.");
		}
		if(null != stackScriptUDFResponses) {
			parameters.put(PARAM_CONSTANT_STACKSCRIPTUDFRESPONSES, stackScriptUDFResponses.toString());
		} else {
			throw new ApiException("Parameter 'stackScriptUDFResponses' is required and cannot be null.");
		}
		if(null != distributionID) {
			parameters.put(PARAM_CONSTANT_DISTRIBUTIONID, distributionID.toString());
		} else {
			throw new ApiException("Parameter 'distributionID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		} else {
			throw new ApiException("Parameter 'label' is required and cannot be null.");
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		} else {
			throw new ApiException("Parameter 'size' is required and cannot be null.");
		}
		if(null != rootPass) {
			parameters.put(PARAM_CONSTANT_ROOTPASS, rootPass.toString());
		} else {
			throw new ApiException("Parameter 'rootPass' is required and cannot be null.");
		}
		if(null != rootSSHKey) {
			parameters.put(PARAM_CONSTANT_ROOTSSHKEY, rootSSHKey.toString());
		}
		return(new LinodeRequest("linode.disk.createfromstackscript", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.delete",
	 *    "DATA":{
	 *       "JobID":1298,
	 *       "DiskID":55648
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param diskID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskdelete(Long linodeID, Long diskID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		} else {
			throw new ApiException("Parameter 'diskID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.delete", parameters));
	}

	/**
	 * <p>Performs a bit-for-bit copy of a disk image.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.duplicate",
	 *    "DATA":{
	 *       "JobID":1299,
	 *       "DiskID":55648
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param diskID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskduplicate(Long linodeID, Long diskID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		} else {
			throw new ApiException("Parameter 'diskID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.duplicate", parameters));
	}

	/**
	 * <p>Creates a gold-master image for future deployments</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.imagize",
	 *    "DATA":{
	 *       "JobID":5693,
	 *       "ImageID":1293
	 *    }
	 * }
	 * </pre>
	 *
	 * @param linodeID Specifies the source Linode to create the image from
	 * @param diskID Specifies the source Disk to create the image from
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskimagize(Long linodeID, Long diskID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		} else {
			throw new ApiException("Parameter 'diskID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.imagize", parameters));
	}

	/**
	 * <p>Creates a gold-master image for future deployments</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.imagize",
	 *    "DATA":{
	 *       "JobID":5693,
	 *       "ImageID":1293
	 *    }
	 * }
	 * </pre>
	 *
	 * @param linodeID Specifies the source Linode to create the image from
	 * @param diskID Specifies the source Disk to create the image from
	 * @param description An optional description of the created image
	 * @param label Sets the name of the image shown in the base image list, defaults to the source image label
	 *
	 */

	public static LinodeRequest diskimagize(Long linodeID, Long diskID, String description, String label) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		} else {
			throw new ApiException("Parameter 'diskID' is required and cannot be null.");
		}
		if(null != description) {
			parameters.put(PARAM_CONSTANT_DESCRIPTION, description.toString());
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		}
		return(new LinodeRequest("linode.disk.imagize", parameters));
	}

	/**
	 * <p>Status values are 1: Ready and 2: Being Deleted.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.list",
	 *    "DATA":[
	 *       {
	 *          "UPDATE_DT":"2009-06-30 13:19:00.0",
	 *          "DISKID":55319,
	 *          "LABEL":"test label",
	 *          "TYPE":"ext3",
	 *          "LINODEID":8098,
	 *          "ISREADONLY":0,
	 *          "STATUS":1,
	 *          "CREATE_DT":"2008-04-04 10:08:06.0",
	 *          "SIZE":4096
	 *       },
	 *       {
	 *          "UPDATE_DT":"2009-07-18 12:53:043.0",
	 *          "DISKID":55320,
	 *          "LABEL":"256M Swap Image",
	 *          "TYPE":"swap",
	 *          "LINODEID":8098,
	 *          "ISREADONLY":0,
	 *          "STATUS":1,
	 *          "CREATE_DT":"2008-04-04 10:08:06.0",
	 *          "SIZE":256
	 *       }
	 *    ]
	 * }
	 * </pre>
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest disklist(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.list", parameters));
	}

	/**
	 * <p>Status values are 1: Ready and 2: Being Deleted.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.list",
	 *    "DATA":[
	 *       {
	 *          "UPDATE_DT":"2009-06-30 13:19:00.0",
	 *          "DISKID":55319,
	 *          "LABEL":"test label",
	 *          "TYPE":"ext3",
	 *          "LINODEID":8098,
	 *          "ISREADONLY":0,
	 *          "STATUS":1,
	 *          "CREATE_DT":"2008-04-04 10:08:06.0",
	 *          "SIZE":4096
	 *       },
	 *       {
	 *          "UPDATE_DT":"2009-07-18 12:53:043.0",
	 *          "DISKID":55320,
	 *          "LABEL":"256M Swap Image",
	 *          "TYPE":"swap",
	 *          "LINODEID":8098,
	 *          "ISREADONLY":0,
	 *          "STATUS":1,
	 *          "CREATE_DT":"2008-04-04 10:08:06.0",
	 *          "SIZE":256
	 *       }
	 *    ]
	 * }
	 * </pre>
	 *
	 * @param linodeID 
	 * @param diskID 
	 *
	 */

	public static LinodeRequest disklist(Long linodeID, Long diskID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		}
		return(new LinodeRequest("linode.disk.list", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.resize",
	 *    "DATA":{
	 *       "JobID":1298,
	 *       "DiskID":55648
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param diskID 
	 * @param size The requested new size of this Disk in MB
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskresize(Long linodeID, Long diskID, Long size) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		} else {
			throw new ApiException("Parameter 'diskID' is required and cannot be null.");
		}
		if(null != size) {
			parameters.put(PARAM_CONSTANT_SIZE, size.toString());
		} else {
			throw new ApiException("Parameter 'size' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.resize", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.update",
	 *    "DATA":{
	 *       "DiskID":55647
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param diskID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest diskupdate(Long diskID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		} else {
			throw new ApiException("Parameter 'diskID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.disk.update", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.disk.update",
	 *    "DATA":{
	 *       "DiskID":55647
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param diskID 
	 * @param label The display label for this Disk
	 * @param isReadOnly Enable forced read-only for this Disk
	 *
	 */

	public static LinodeRequest diskupdate(Long linodeID, Long diskID, String label, Boolean isReadOnly) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		}
		if(null != diskID) {
			parameters.put(PARAM_CONSTANT_DISKID, diskID.toString());
		} else {
			throw new ApiException("Parameter 'diskID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		}
		if(null != isReadOnly) {
			parameters.put(PARAM_CONSTANT_ISREADONLY, isReadOnly.toString());
		}
		return(new LinodeRequest("linode.disk.update", parameters));
	}

	/**
	 * <p>Assigns a Private IP to a Linode. Returns the IPAddressID that was added.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY": [ ],
	 *    "DATA": {
	 *       "IPAddressID": 8364,
	 *       "IPAddress": "192.168.131.118"
	 *    },
	 *    "ACTION": "linode.ip.addprivate"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest ipaddprivate(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.ip.addprivate", parameters));
	}

	/**
	 * <p>Assigns a Public IP to a Linode. Returns the IPAddressID and IPAddress that was added.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY": [ ],
	 *    "DATA": {
	 *       "IPADDRESSID": 5384,
	 *       "IPADDRESS": "75.128.96.54"
	 *    },
	 *    "ACTION": "linode.ip.addpublic"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID The LinodeID of the Linode that will be assigned an additional public IP address
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest ipaddpublic(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.ip.addpublic", parameters));
	}

	/**
	 * <p>Returns the IP addresses of all Linodes you have access to.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.ip.list",
	 *    "DATA":[
	 *       {
	 *          "LINODEID":8098,
	 *          "ISPUBLIC":1,
	 *          "IPADDRESS":"75.127.96.54",
	 *          "RDNS_NAME":"li22-54.members.linode.com",
	 *          "IPADDRESSID":5384
	 *       },
	 *       {
	 *          "LINODEID":8099,
	 *          "ISPUBLIC":1,
	 *          "IPADDRESS":"75.127.96.245",
	 *          "RDNS_NAME":"li22-245.members.linode.com",
	 *          "IPADDRESSID":5575
	 *       }
	 *    ]
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest iplist() throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		return(new LinodeRequest("linode.ip.list", parameters));
	}

	/**
	 * <p>Returns the IP addresses of all Linodes you have access to.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.ip.list",
	 *    "DATA":[
	 *       {
	 *          "LINODEID":8098,
	 *          "ISPUBLIC":1,
	 *          "IPADDRESS":"75.127.96.54",
	 *          "RDNS_NAME":"li22-54.members.linode.com",
	 *          "IPADDRESSID":5384
	 *       },
	 *       {
	 *          "LINODEID":8099,
	 *          "ISPUBLIC":1,
	 *          "IPADDRESS":"75.127.96.245",
	 *          "RDNS_NAME":"li22-245.members.linode.com",
	 *          "IPADDRESSID":5575
	 *       }
	 *    ]
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID If specified, limits the result to this LinodeID
	 * @param iPAddressID If specified, limits the result to this IPAddressID
	 *
	 */

	public static LinodeRequest iplist(Long linodeID, Long iPAddressID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		}
		if(null != iPAddressID) {
			parameters.put(PARAM_CONSTANT_IPADDRESSID, iPAddressID.toString());
		}
		return(new LinodeRequest("linode.ip.list", parameters));
	}

	/**
	 * <p>Sets the rDNS name of a Public IP. Returns the IPAddressID and IPAddress that were 
	 * updated.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY": [ ],
	 *    "DATA": {
	 *       "HOSTNAME": "li13-10.members.linode.com",
	 *       "IPADDRESSID": 5384,
	 *       "IPADDRESS": "69.93.127.10"
	 *    },
	 *    "ACTION": "linode.ip.setrdns"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param iPAddressID The IPAddressID of the address to update
	 * @param hostname The hostname to set the reverse DNS to
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest ipsetrdns(Long iPAddressID, String hostname) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != iPAddressID) {
			parameters.put(PARAM_CONSTANT_IPADDRESSID, iPAddressID.toString());
		} else {
			throw new ApiException("Parameter 'iPAddressID' is required and cannot be null.");
		}
		if(null != hostname) {
			parameters.put(PARAM_CONSTANT_HOSTNAME, hostname.toString());
		} else {
			throw new ApiException("Parameter 'hostname' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.ip.setrdns", parameters));
	}

	/**
	 * <p>Exchanges Public IP addresses between two Linodes within a Datacenter. The destination of 
	 * the IP Address can be designated by either the toLinodeID or withIPAddressID parameter. Returns 
	 * the resulting relationship of the Linode and IP Address parameters. When performing a one 
	 * directional swap, the source is represented by the first of the two resultant array members.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY": [ ],
	 *    "DATA": [
	 *       {
	 *          "LINODEID": 8099,
	 *          "IPADDRESS": "75.128.96.54",
	 *          "IPADDRESSID": 5384
	 *       },
	 *       {
	 *          "IPADDRESS": "75.127.96.245",
	 *          "LINODEID": 8098,
	 *          "IPADDRESSID": 5575
	 *       }
	 *    ],
	 *    "ACTION": "linode.ip.swap"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param iPAddressID The IPAddressID of an IP Address to transfer or swap
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest ipswap(Long iPAddressID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != iPAddressID) {
			parameters.put(PARAM_CONSTANT_IPADDRESSID, iPAddressID.toString());
		} else {
			throw new ApiException("Parameter 'iPAddressID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.ip.swap", parameters));
	}

	/**
	 * <p>Exchanges Public IP addresses between two Linodes within a Datacenter. The destination of 
	 * the IP Address can be designated by either the toLinodeID or withIPAddressID parameter. Returns 
	 * the resulting relationship of the Linode and IP Address parameters. When performing a one 
	 * directional swap, the source is represented by the first of the two resultant array members.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY": [ ],
	 *    "DATA": [
	 *       {
	 *          "LINODEID": 8099,
	 *          "IPADDRESS": "75.128.96.54",
	 *          "IPADDRESSID": 5384
	 *       },
	 *       {
	 *          "IPADDRESS": "75.127.96.245",
	 *          "LINODEID": 8098,
	 *          "IPADDRESSID": 5575
	 *       }
	 *    ],
	 *    "ACTION": "linode.ip.swap"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param iPAddressID The IPAddressID of an IP Address to transfer or swap
	 * @param withIPAddressID The IP Address ID to swap
	 * @param toLinodeID The LinodeID of the Linode where IPAddressID will be transfered
	 *
	 */

	public static LinodeRequest ipswap(Long iPAddressID, Long withIPAddressID, Long toLinodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != iPAddressID) {
			parameters.put(PARAM_CONSTANT_IPADDRESSID, iPAddressID.toString());
		} else {
			throw new ApiException("Parameter 'iPAddressID' is required and cannot be null.");
		}
		if(null != withIPAddressID) {
			parameters.put(PARAM_CONSTANT_WITHIPADDRESSID, withIPAddressID.toString());
		}
		if(null != toLinodeID) {
			parameters.put(PARAM_CONSTANT_TOLINODEID, toLinodeID.toString());
		}
		return(new LinodeRequest("linode.ip.swap", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.job.list",
	 *    "DATA":[
	 *       {
	 *          "ENTERED_DT":"2009-06-29 18:43:25.0",
	 *          "ACTION":"fs.create",
	 *          "LABEL":"Create Filesystem - test label",
	 *          "HOST_START_DT":"2009-07-27 15:32:40.0",
	 *          "LINODEID":8098,
	 *          "HOST_FINISH_DT":"2009-07-27 15:32:40.0",
	 *          "DURATION":0,
	 *          "HOST_MESSAGE":"",
	 *          "JOBID":1207,
	 *          "HOST_SUCCESS":1
	 *       },
	 *       {
	 *          "ENTERED_DT":"2009-06-16 18:08:36.0",
	 *          "ACTION":"linode.shutdown",
	 *          "LABEL":"System Shutdown",
	 *          "HOST_START_DT":"2009-07-27 15:32:39.0",
	 *          "LINODEID":8098,
	 *          "HOST_FINISH_DT":"2009-07-27 15:32:40.0",
	 *          "DURATION":1,
	 *          "HOST_MESSAGE":"",
	 *          "JOBID":1205,
	 *          "HOST_SUCCESS":1
	 *       }
	 *    ]
	 * }
	 * </pre>
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest joblist(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.job.list", parameters));
	}

	/**
	 * <p></p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.job.list",
	 *    "DATA":[
	 *       {
	 *          "ENTERED_DT":"2009-06-29 18:43:25.0",
	 *          "ACTION":"fs.create",
	 *          "LABEL":"Create Filesystem - test label",
	 *          "HOST_START_DT":"2009-07-27 15:32:40.0",
	 *          "LINODEID":8098,
	 *          "HOST_FINISH_DT":"2009-07-27 15:32:40.0",
	 *          "DURATION":0,
	 *          "HOST_MESSAGE":"",
	 *          "JOBID":1207,
	 *          "HOST_SUCCESS":1
	 *       },
	 *       {
	 *          "ENTERED_DT":"2009-06-16 18:08:36.0",
	 *          "ACTION":"linode.shutdown",
	 *          "LABEL":"System Shutdown",
	 *          "HOST_START_DT":"2009-07-27 15:32:39.0",
	 *          "LINODEID":8098,
	 *          "HOST_FINISH_DT":"2009-07-27 15:32:40.0",
	 *          "DURATION":1,
	 *          "HOST_MESSAGE":"",
	 *          "JOBID":1205,
	 *          "HOST_SUCCESS":1
	 *       }
	 *    ]
	 * }
	 * </pre>
	 *
	 * @param linodeID 
	 * @param jobID Limits the list to the specified JobID
	 * @param pendingOnly 
	 *
	 */

	public static LinodeRequest joblist(Long linodeID, Long jobID, Boolean pendingOnly) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != jobID) {
			parameters.put(PARAM_CONSTANT_JOBID, jobID.toString());
		}
		if(null != pendingOnly) {
			parameters.put(PARAM_CONSTANT_PENDINGONLY, pendingOnly.toString());
		}
		return(new LinodeRequest("linode.job.list", parameters));
	}

	/**
	 * <p>Returns a list of all Linodes user has access or delete to, including some properties. 
	 * Status values are -1: Being Created, 0: Brand New, 1: Running, and 2: Powered Off.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.list",
	 *    "DATA":[
	 *       {
	 *          "TOTALXFER":2000,
	 *          "BACKUPSENABLED":1,
	 *          "WATCHDOG":1,
	 *          "LPM_DISPLAYGROUP":"",
	 *          "ALERT_BWQUOTA_ENABLED":1,
	 *          "STATUS":2,
	 *          "TOTALRAM":1024,
	 *          "ALERT_DISKIO_THRESHOLD":1000,
	 *          "BACKUPWINDOW":1,
	 *          "ALERT_BWOUT_ENABLED":1,
	 *          "ALERT_BWOUT_THRESHOLD":5,
	 *          "LABEL":"api-node3",
	 *          "ALERT_CPU_ENABLED":1,
	 *          "ALERT_BWQUOTA_THRESHOLD":80,
	 *          "ALERT_BWIN_THRESHOLD":5,
	 *          "BACKUPWEEKLYDAY":0,
	 *          "DATACENTERID":5,
	 *          "ALERT_CPU_THRESHOLD":90,
	 *          "TOTALHD":40960,
	 *          "ALERT_DISKIO_ENABLED":1,
	 *          "ALERT_BWIN_ENABLED":1,
	 *          "LINODEID":8098,
	 *          "CREATE_DT":"2015-09-22 11:33:06.0",
	 *          "PLANID":1,
	 *          "DISTRIBUTIONVENDOR": "Debian",
	 *          "ISXEN":0,
	 *          "ISKVM":1
	 *       }
	 *    ]
	 * }
	 * </pre>
	 *
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest list() throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		return(new LinodeRequest("linode.list", parameters));
	}

	/**
	 * <p>Returns a list of all Linodes user has access or delete to, including some properties. 
	 * Status values are -1: Being Created, 0: Brand New, 1: Running, and 2: Powered Off.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.list",
	 *    "DATA":[
	 *       {
	 *          "TOTALXFER":2000,
	 *          "BACKUPSENABLED":1,
	 *          "WATCHDOG":1,
	 *          "LPM_DISPLAYGROUP":"",
	 *          "ALERT_BWQUOTA_ENABLED":1,
	 *          "STATUS":2,
	 *          "TOTALRAM":1024,
	 *          "ALERT_DISKIO_THRESHOLD":1000,
	 *          "BACKUPWINDOW":1,
	 *          "ALERT_BWOUT_ENABLED":1,
	 *          "ALERT_BWOUT_THRESHOLD":5,
	 *          "LABEL":"api-node3",
	 *          "ALERT_CPU_ENABLED":1,
	 *          "ALERT_BWQUOTA_THRESHOLD":80,
	 *          "ALERT_BWIN_THRESHOLD":5,
	 *          "BACKUPWEEKLYDAY":0,
	 *          "DATACENTERID":5,
	 *          "ALERT_CPU_THRESHOLD":90,
	 *          "TOTALHD":40960,
	 *          "ALERT_DISKIO_ENABLED":1,
	 *          "ALERT_BWIN_ENABLED":1,
	 *          "LINODEID":8098,
	 *          "CREATE_DT":"2015-09-22 11:33:06.0",
	 *          "PLANID":1,
	 *          "DISTRIBUTIONVENDOR": "Debian",
	 *          "ISXEN":0,
	 *          "ISKVM":1
	 *       }
	 *    ]
	 * }
	 * </pre>
	 *
	 * @param linodeID Limits the list to the specified LinodeID
	 *
	 */

	public static LinodeRequest list(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		}
		return(new LinodeRequest("linode.list", parameters));
	}

	/**
	 * <p>Issues a shutdown, and then boot job for a given LinodeID.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.reboot",
	 *    "DATA":{
	 *       "JobID":1295
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest reboot(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.reboot", parameters));
	}

	/**
	 * <p>Issues a shutdown, and then boot job for a given LinodeID.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.reboot",
	 *    "DATA":{
	 *       "JobID":1295
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 * @param configID 
	 *
	 */

	public static LinodeRequest reboot(Long linodeID, Long configID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != configID) {
			parameters.put(PARAM_CONSTANT_CONFIGID, configID.toString());
		}
		return(new LinodeRequest("linode.reboot", parameters));
	}

	/**
	 * <p>Resizes a Linode from one plan to another. Immediately shuts the Linode down, 
	 * charges/credits the account, and issue a migration to another host server.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    ERRORARRAY: [
	 *       {
	 *          ERRORCODE: 0,
	 *          ERRORMESSAGE: "ok"
	 *       }
	 *    ],
	 *    DATA: { },
	 *    ACTION: "linode.resize"
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - CCFAILED
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param planID The desired PlanID available from avail.LinodePlans()
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest resize(Long linodeID, Long planID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != planID) {
			parameters.put(PARAM_CONSTANT_PLANID, planID.toString());
		} else {
			throw new ApiException("Parameter 'planID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.resize", parameters));
	}

	/**
	 * <p>Issues a shutdown job for a given LinodeID.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.shutdown",
	 *    "DATA":{
	 *       "JobID":1292
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest shutdown(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.shutdown", parameters));
	}

	/**
	 * <p>Updates a Linode's properties.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.update",
	 *    "DATA":{
	 *       "LinodeID":8098
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest update(Long linodeID) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		return(new LinodeRequest("linode.update", parameters));
	}

	/**
	 * <p>Updates a Linode's properties.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"linode.update",
	 *    "DATA":{
	 *       "LinodeID":8098
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - NOTFOUND
	 *   - VALIDATION
	 *
	 * @param linodeID 
	 * @param label This Linode's label
	 * @param lpm_displayGroup Display group in the Linode list inside the Linode Manager
	 * @param Alert_cpu_enabled Enable the cpu usage email alert
	 * @param Alert_cpu_threshold CPU Alert threshold, percentage 0-800
	 * @param Alert_diskio_enabled Enable the disk IO email alert
	 * @param Alert_diskio_threshold IO ops/sec
	 * @param Alert_bwin_enabled Enable the incoming bandwidth email alert
	 * @param Alert_bwin_threshold Mb/sec
	 * @param Alert_bwout_enabled Enable the outgoing bandwidth email alert
	 * @param Alert_bwout_threshold Mb/sec
	 * @param Alert_bwquota_enabled Enable the bw quote email alert
	 * @param Alert_bwquota_threshold Percentage of monthly bw quota
	 * @param backupWindow 
	 * @param backupWeeklyDay 
	 * @param watchdog Enable the Lassie shutdown watchdog
	 * @param ms_ssh_disabled 
	 * @param ms_ssh_user 
	 * @param ms_ssh_ip 
	 * @param ms_ssh_port 
	 *
	 */

	public static LinodeRequest update(Long linodeID, String label, String lpm_displayGroup, Boolean Alert_cpu_enabled, Long Alert_cpu_threshold, Boolean Alert_diskio_enabled, Long Alert_diskio_threshold, Boolean Alert_bwin_enabled, Long Alert_bwin_threshold, Boolean Alert_bwout_enabled, Long Alert_bwout_threshold, Boolean Alert_bwquota_enabled, Long Alert_bwquota_threshold, Long backupWindow, Long backupWeeklyDay, Boolean watchdog, Boolean ms_ssh_disabled, String ms_ssh_user, String ms_ssh_ip, Long ms_ssh_port) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != linodeID) {
			parameters.put(PARAM_CONSTANT_LINODEID, linodeID.toString());
		} else {
			throw new ApiException("Parameter 'linodeID' is required and cannot be null.");
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		}
		if(null != lpm_displayGroup) {
			parameters.put(PARAM_CONSTANT_LPM_DISPLAYGROUP, lpm_displayGroup.toString());
		}
		if(null != Alert_cpu_enabled) {
			parameters.put(PARAM_CONSTANT_ALERT_CPU_ENABLED, Alert_cpu_enabled.toString());
		}
		if(null != Alert_cpu_threshold) {
			parameters.put(PARAM_CONSTANT_ALERT_CPU_THRESHOLD, Alert_cpu_threshold.toString());
		}
		if(null != Alert_diskio_enabled) {
			parameters.put(PARAM_CONSTANT_ALERT_DISKIO_ENABLED, Alert_diskio_enabled.toString());
		}
		if(null != Alert_diskio_threshold) {
			parameters.put(PARAM_CONSTANT_ALERT_DISKIO_THRESHOLD, Alert_diskio_threshold.toString());
		}
		if(null != Alert_bwin_enabled) {
			parameters.put(PARAM_CONSTANT_ALERT_BWIN_ENABLED, Alert_bwin_enabled.toString());
		}
		if(null != Alert_bwin_threshold) {
			parameters.put(PARAM_CONSTANT_ALERT_BWIN_THRESHOLD, Alert_bwin_threshold.toString());
		}
		if(null != Alert_bwout_enabled) {
			parameters.put(PARAM_CONSTANT_ALERT_BWOUT_ENABLED, Alert_bwout_enabled.toString());
		}
		if(null != Alert_bwout_threshold) {
			parameters.put(PARAM_CONSTANT_ALERT_BWOUT_THRESHOLD, Alert_bwout_threshold.toString());
		}
		if(null != Alert_bwquota_enabled) {
			parameters.put(PARAM_CONSTANT_ALERT_BWQUOTA_ENABLED, Alert_bwquota_enabled.toString());
		}
		if(null != Alert_bwquota_threshold) {
			parameters.put(PARAM_CONSTANT_ALERT_BWQUOTA_THRESHOLD, Alert_bwquota_threshold.toString());
		}
		if(null != backupWindow) {
			parameters.put(PARAM_CONSTANT_BACKUPWINDOW, backupWindow.toString());
		}
		if(null != backupWeeklyDay) {
			parameters.put(PARAM_CONSTANT_BACKUPWEEKLYDAY, backupWeeklyDay.toString());
		}
		if(null != watchdog) {
			parameters.put(PARAM_CONSTANT_WATCHDOG, watchdog.toString());
		}
		if(null != ms_ssh_disabled) {
			parameters.put(PARAM_CONSTANT_MS_SSH_DISABLED, ms_ssh_disabled.toString());
		}
		if(null != ms_ssh_user) {
			parameters.put(PARAM_CONSTANT_MS_SSH_USER, ms_ssh_user.toString());
		}
		if(null != ms_ssh_ip) {
			parameters.put(PARAM_CONSTANT_MS_SSH_IP, ms_ssh_ip.toString());
		}
		if(null != ms_ssh_port) {
			parameters.put(PARAM_CONSTANT_MS_SSH_PORT, ms_ssh_port.toString());
		}
		return(new LinodeRequest("linode.update", parameters));
	}

};