package synapticloop.linode.api;

// - - - - thoughtfully generated by synapticloop linode-api - - - - 
//     with the use of synapticloop templar templating language
//               (java-create-api.templar)

import java.util.HashMap;
import java.util.Map;

import synapticloop.linode.LinodeRequest;
import synapticloop.linode.exception.ApiException;

/**
 * This is the interaction class for the User api calls, this was automatically
 * generated from the linode api documentation.
 * 
 * @author synapticloop
 */

public class User {
	private static final String PARAM_CONSTANT_USERNAME = "username";
	private static final String PARAM_CONSTANT_PASSWORD = "password";
	private static final String PARAM_CONSTANT_TOKEN = "token";
	private static final String PARAM_CONSTANT_EXPIRES = "expires";
	private static final String PARAM_CONSTANT_LABEL = "label";

/**
 * Private constructor to deter instantiation
 */
private User() {}

	/**
	 * <p>Authenticates a Linode Manager user against their username, password, and two-factor 
	 * token (when enabled), and then returns a new API key, which can be used until it expires. The number of 
	 * active keys is limited to 20.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"user.getAPIKey",
	 *    "DATA":{
	 *       "USERNAME":"chris",
	 *       "API_KEY":"aNW3ydF53LpVftU9s50e0reFEwy0piwGhwaLKAj4okRZ"
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - AUTHFAIL
	 *   - NEEDTOKEN
	 *   - PASSWORDEXPIRED
	 *   - KEYLIMIT
	 *
	 * @param username (<strong>SORRY</strong> there was no description provided for this parameter in the documentation, thereore I could not generate one)
	 * @param password (<strong>SORRY</strong> there was no description provided for this parameter in the documentation, thereore I could not generate one)
	 *
	 * @return the linode request object
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest getapikey(String username, String password) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != username) {
			parameters.put(PARAM_CONSTANT_USERNAME, username.toString());
		} else {
			throw new ApiException("Parameter 'username' is required and cannot be null.");
		}
		if(null != password) {
			parameters.put(PARAM_CONSTANT_PASSWORD, password.toString());
		} else {
			throw new ApiException("Parameter 'password' is required and cannot be null.");
		}
		return(new LinodeRequest("user.getapikey", parameters));
	}

	/**
	 * <p>Authenticates a Linode Manager user against their username, password, and two-factor 
	 * token (when enabled), and then returns a new API key, which can be used until it expires. The number of 
	 * active keys is limited to 20.</p> 
	 * 
	 * Example response:
	 * 
	 * <pre>
	 * {
	 *    "ERRORARRAY":[],
	 *    "ACTION":"user.getAPIKey",
	 *    "DATA":{
	 *       "USERNAME":"chris",
	 *       "API_KEY":"aNW3ydF53LpVftU9s50e0reFEwy0piwGhwaLKAj4okRZ"
	 *    }
	 * }
	 * </pre>
	 * 
	 * Possible return error codes:
	 * 
	 *   - AUTHFAIL
	 *   - NEEDTOKEN
	 *   - PASSWORDEXPIRED
	 *   - KEYLIMIT
	 *
	 * @param username (<strong>SORRY</strong> there was no description provided for this parameter in the documentation, thereore I could not generate one)
	 * @param password (<strong>SORRY</strong> there was no description provided for this parameter in the documentation, thereore I could not generate one)
	 * @param token Required when two-factor authentication is enabled.
	 * @param expires Number of hours the key will remain valid, between 0 and 8760. 0 means no expiration. Defaults to 168.
	 * @param label An optional label for this key.
	 *
	 * @return the linode request object
	 *
	 * @throws ApiException if a required parameter is null
	 */

	public static LinodeRequest getapikey(String username, String password, String token, Long expires, String label) throws ApiException {
		Map<String, String> parameters = new HashMap<String, String>();
		if(null != username) {
			parameters.put(PARAM_CONSTANT_USERNAME, username.toString());
		} else {
			throw new ApiException("Parameter 'username' is required and cannot be null.");
		}
		if(null != password) {
			parameters.put(PARAM_CONSTANT_PASSWORD, password.toString());
		} else {
			throw new ApiException("Parameter 'password' is required and cannot be null.");
		}
		if(null != token) {
			parameters.put(PARAM_CONSTANT_TOKEN, token.toString());
		}
		if(null != expires) {
			parameters.put(PARAM_CONSTANT_EXPIRES, expires.toString());
		}
		if(null != label) {
			parameters.put(PARAM_CONSTANT_LABEL, label.toString());
		}
		return(new LinodeRequest("user.getapikey", parameters));
	}

};