package synapticloop.linode.api.request;{\n}{\n}
// - - - - thoughtfully generated by synapticloop linode-api - - - - {\n}
//     with the use of synapticloop templar templating language{\n}
//               (java-create-api.templar){\n}{\n}

{if fn:<>[api.className "Test"]}
	import java.util.HashMap;{\n}
{endif}

import java.util.Map;{\n}
{\n}
import synapticloop.linode.LinodeApiRequest;{\n}
import synapticloop.linode.exception.ApiException;{\n}


{\n}
/**{\n}
 * This is the interaction class for the {api.className} api calls, this was automatically{\n}
 * generated from the linode api documentation - which can be found here:{\n}
 * <a href="{api.location}">{api.location}</a>{\n}
 * {\n}
 * @author synapticloop{\n}
 */{\n}
{\n}
public class {api.className}Request extends ApiBaseRequest {{{\n}

	{loop api.constantCache.keySet as key}
		{\t}private static final String {key} = "{api.constantCache.$key}";{\n}
	{endloop}
{\n}

	{\t}/**{\n}
	{\t} * Private constructor to deter instantiation{\n}
	{\t} */{\n}

{\t}private {api.className}Request() {{}{\n}
{\n}

	{loop api.apiMethods as apiMethod}
		{\t}/**{\n}

		{loop apiMethod.descriptions as description}
			{\t} * {description}{\n}
		{endloop}

		{loop apiMethod.exampleResponses as exampleResponse}
			{if exampleResponseStatus.first}
				{\t} * {\n}
				{\t} * Example response:{\n}
				{\t} * {\n}
				{\t} * <pre>{\n}
			{endif}
			{\t} * {exampleResponse}{\n}
			{if exampleResponseStatus.last}
				{\t} * </pre>{\n}
			{endif}
		{endloop}

		{loop apiMethod.apiErrors as apiError}
			{if apiErrorStatus.first}
				{\t} * {\n}
				{\t} * Possible return error codes:{\n}
				{\t} * {\n}
				{\t} * <ul>{\n}
			{endif}
			{\t} *   <li>{apiError}</li>{\n}
			{if apiErrorStatus.last}
				{\t} * </ul>{\n}
			{endif}
		{endloop}

		{\t} *{\n}
			{--
			  At this point we are doing a special test for the 'echo' method
			}

			{if fn:=[apiMethod.name, "echo"]}
				{\t} * @param parameters the map of parameters (String:String) to echo back{\n}
			{endif}

			{loop apiMethod.requiredApiMethodParams as apiMethodParam}
				{\t} * @param {apiMethodParam.parameterName}
					{if apiMethodParam.required} <strong>(REQUIRED)</strong> {else} <em>(OPTIONAL)</em> {endif}
					{if fn:=[fn:length[apiMethodParam.description], "0"]}
						(<strong>SORRY</strong> - there was no description provided in the documentation)
					{else}  {apiMethodParam.description}{endif}{\n}
			{endloop}
		{\t} *{\n}
		{\t} * @return the linode request object{\n}
		{\t} *{\n}
		{\t} * @throws ApiException if a required parameter is null, or there was an error with the call{\n}
		{\t} */{\n}

		{\t}public static LinodeApiRequest {apiMethod.name}(
				{loop apiMethod.requiredApiMethodParams as apiMethodParam}
					{apiMethodParam.type} {apiMethodParam.parameterName}{if !apiMethodParamStatus.last}, {endif}
				{endloop}

				{if fn:=[apiMethod.name, "echo"]}Map<String, String> parameters{endif}

					) throws ApiException {{{\n}

				{if fn:<>[apiMethod.name, "echo"]}
					{\t}{\t}Map<String, String> parameters = new HashMap<String, String>();{\n}
				{endif}


				{loop apiMethod.requiredApiMethodParams as apiMethodParam}
					{\t}{\t}addParameterSafely(parameters, {apiMethodParam.parameterNameConstant}, {apiMethodParam.parameterName}, {!apiMethodParam.required});{\n}
				{endloop}

				{\t}{\t}return(new LinodeApiRequest("{apiMethod.methodName}", parameters));{\n}

		{\t}}{\n}
{\n}

		{--
			This is the method for all of the parameters (required and optional), but
			only generated if the method signature won't conflict with the required
			parameter method
		}

		{if !fn:=[fn:length[apiMethod.requiredApiMethodParams], fn:length[apiMethod.apiMethodParams]]}

			{\t}/**{\n}

			{loop apiMethod.descriptions as description}
				{\t} * {description}{\n}
			{endloop}

			{loop apiMethod.exampleResponses as exampleResponse}
				{if exampleResponseStatus.first}
					{\t} * {\n}
					{\t} * Example response:{\n}
					{\t} * {\n}
					{\t} * <pre>{\n}
				{endif}
				{\t} * {exampleResponse}{\n}
				{if exampleResponseStatus.last}
					{\t} * </pre>{\n}
				{endif}
			{endloop}


			{loop apiMethod.apiErrors as apiError}
				{if apiErrorStatus.first}
					{\t} * {\n}
					{\t} * Possible return error codes:{\n}
					{\t} * {\n}
				{endif}
				{\t} *   - {apiError}{\n}
			{endloop}

			{\t} *{\n}
			{--
			  At this point we are doind a special test for the 'echo' method
			}

			{if fn:=[apiMethod.name, "echo"]}
				{\t} * @param parameters the map of parameters (String:String) to echo back{\n}
			{endif}

				{loop apiMethod.apiMethodParams as apiMethodParam}
					{\t} * @param {apiMethodParam.parameterName} 
						{if apiMethodParam.required}<strong>(REQUIRED)</strong> {else} <em>(OPTIONAL)</em> {endif}
						{if fn:=[fn:length[apiMethodParam.description], "0"]}
							(<strong>SORRY</strong> - there was no description provided in the documentation)
						{else}
							{apiMethodParam.description}
						{endif}{\n}
				{endloop}
			{\t} *{\n}
			{\t} * @return the linode request object{\n}
			{\t} *{\n}
			{\t} * @throws ApiException if a required parameter is null, or there is an error with the call{\n}
			{\t} */{\n}

			{\t}public static LinodeApiRequest {apiMethod.name}(
				{loop apiMethod.apiMethodParams as apiMethodParam}
					{apiMethodParam.type} {apiMethodParam.parameterName}{if !apiMethodParamStatus.last}, {endif}
				{endloop}

				{if fn:=[apiMethod.name, "echo"]}Map<String, String> parameters{endif}

					) throws ApiException {{{\n}

				{if fn:<>[apiMethod.name, "echo"]}
					{\t}{\t}Map<String, String> parameters = new HashMap<String, String>();{\n}
				{endif}

				{loop apiMethod.apiMethodParams as apiMethodParam}
					{\t}{\t}addParameterSafely(parameters, {apiMethodParam.parameterNameConstant}, {apiMethodParam.parameterName}, {!apiMethodParam.required});{\n}
				{endloop}

				{\t}{\t}return(new LinodeApiRequest("{apiMethod.methodName}", parameters));{\n}

		{\t}}{\n}

{\n}

		{endif}

	{endloop}
};
