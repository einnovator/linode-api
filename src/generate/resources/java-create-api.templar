package synapticloop.linode.api;{\n}{\n}
// - - - - thoughtfully generated by synapticloop linode-api - - - - {\n}
//     with the use of synapticloop templar templating language{\n}
//               (java-create-api.templar){\n}{\n}

import java.util.HashMap;{\n}
import java.util.Map;{\n}
{\n}
import synapticloop.linode.LinodeRequest;{\n}
import synapticloop.linode.exception.ApiException;{\n}


{\n}

public class {api.className} {{{\n}

	{loop api.constantCache.keySet as key}
		{\t}private static final String {key} = "{api.constantCache.$key}";{\n}
	{endloop}
{\n}

	{loop api.apiMethods as apiMethod}
		{\t}/**{\n}

		{loop apiMethod.descriptions as description}
			{\t} * {description}{\n}
		{endloop}

		{loop apiMethod.exampleResponses as exampleResponse}
			{if exampleResponseStatus.first}
				{\t} * {\n}
				{\t} * Example response:{\n}
				{\t} * {\n}
				{\t} * <pre>{\n}
			{endif}
			{\t} * {exampleResponse}{\n}
			{if exampleResponseStatus.last}
				{\t} * </pre>{\n}
			{endif}
		{endloop}

		{loop apiMethod.apiErrors as apiError}
			{if apiErrorStatus.first}
				{\t} * {\n}
				{\t} * Possible return error codes:{\n}
				{\t} * {\n}
			{endif}
			{\t} *   - {apiError}{\n}
		{endloop}

		{\t} *{\n}
			{loop apiMethod.requiredApiMethodParams as apiMethodParam}
				{\t} * @param {apiMethodParam.parameterName} 
					{if fn:<[fn:length[apiMethodParam.description], "1"]}
						(<strong>SORRY</strong> there was no description provided for this parameter in the documentation, thereore I could not generate one)
					{else}
						{apiMethodParam.description}
					{endif}{\n}
			{endloop}
		{\t} *{\n}
		{\t} * @return the linode request object{\n}
		{\t} *{\n}
		{\t} * @throws ApiException if a required parameter is null{\n}
		{\t} */{\n}

{\n}
		{\t}public static LinodeRequest {apiMethod.name}(
				{loop apiMethod.requiredApiMethodParams as apiMethodParam}
					{apiMethodParam.type} {apiMethodParam.parameterName}{if !apiMethodParamStatus.last}, {endif}
				{endloop}
					) throws ApiException {{{\n}
				{\t}{\t}Map<String, String> parameters = new HashMap<String, String>();{\n}
				{loop apiMethod.requiredApiMethodParams as apiMethodParam}
					{\t}{\t}if(null != {apiMethodParam.parameterName}) {{{\n}
					{\t}{\t}{\t}parameters.put({apiMethodParam.parameterNameConstant}, {apiMethodParam.parameterName}.toString());{\n}
					{\t}{\t}} else {{{\n}
					{\t}{\t}{\t}throw new ApiException("Parameter '{apiMethodParam.parameterName}' is required and cannot be null.");{\n}
					{\t}{\t}}{\n}
				{endloop}

				{\t}{\t}return(new LinodeRequest("{apiMethod.methodName}", parameters));{\n}

		{\t}}{\n}
{\n}

		{--
			This is the method for all of the parameters (required and optional), but
			only generated if the method signature won't conflict with the required
			parameter method
		}

		{if !fn:=[fn:length[apiMethod.requiredApiMethodParams], fn:length[apiMethod.apiMethodParams]]}

			{\t}/**{\n}

			{loop apiMethod.descriptions as description}
				{\t} * {description}{\n}
			{endloop}

			{loop apiMethod.exampleResponses as exampleResponse}
				{if exampleResponseStatus.first}
					{\t} * {\n}
					{\t} * Example response:{\n}
					{\t} * {\n}
					{\t} * <pre>{\n}
				{endif}
				{\t} * {exampleResponse}{\n}
				{if exampleResponseStatus.last}
					{\t} * </pre>{\n}
				{endif}
			{endloop}


			{loop apiMethod.apiErrors as apiError}
				{if apiErrorStatus.first}
					{\t} * {\n}
					{\t} * Possible return error codes:{\n}
					{\t} * {\n}
				{endif}
				{\t} *   - {apiError}{\n}
			{endloop}

			{\t} *{\n}
				{loop apiMethod.apiMethodParams as apiMethodParam}
					{\t} * @param {apiMethodParam.parameterName} 
						{if fn:<[fn:length[apiMethodParam.description], "1"]}
							(<strong>SORRY</strong> there was no description provided for this parameter in the documentation, thereore I could not generate one)
						{else}
							{apiMethodParam.description}
						{endif}{\n}
				{endloop}
			{\t} *{\n}
			{\t} * @return the linode request object{\n}
			{\t} *{\n}
			{\t} * @throws ApiException if a required parameter is null{\n}
			{\t} */{\n}
{\n}

		{\t}public static LinodeRequest {apiMethod.name}(
				{loop apiMethod.apiMethodParams as apiMethodParam}
					{apiMethodParam.type} {apiMethodParam.parameterName}{if !apiMethodParamStatus.last}, {endif}
				{endloop}
					) throws ApiException {{{\n}
				{\t}{\t}Map<String, String> parameters = new HashMap<String, String>();{\n}
				{loop apiMethod.apiMethodParams as apiMethodParam}
					{\t}{\t}if(null != {apiMethodParam.parameterName}) {{{\n}
					{\t}{\t}{\t}parameters.put({apiMethodParam.parameterNameConstant}, {apiMethodParam.parameterName}.toString());{\n}

					{if apiMethodParam.required}
						{\t}{\t}} else {{{\n}
						{\t}{\t}{\t}throw new ApiException("Parameter '{apiMethodParam.parameterName}' is required and cannot be null.");{\n}
					{endif}

					{\t}{\t}}{\n}

				{endloop}

				{\t}{\t}return(new LinodeRequest("{apiMethod.methodName}", parameters));{\n}

		{\t}}{\n}

{\n}

		{endif}

	{endloop}
};